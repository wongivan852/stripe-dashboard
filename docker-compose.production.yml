# Production Docker Compose for Dell Linux Server Deployment
# Optimized for performance, security, and monitoring

version: '3.8'

services:
  # Main Stripe Dashboard application
  stripe-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.multi-stage
      target: production
      args:
        BUILDPLATFORM: linux/amd64
        TARGETPLATFORM: linux/amd64
    container_name: stripe-dashboard-app
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - DATABASE_URL=sqlite:///var/lib/stripe_dashboard/production.db
      - SECRET_KEY=${SECRET_KEY}
      - HOST=0.0.0.0
      - PORT=5000
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Hong_Kong
    
    # Volume mounts for persistence
    volumes:
      # Database persistence
      - stripe_db_data:/var/lib/stripe_dashboard
      # CSV data and uploads
      - stripe_csv_data:/app/csv_data
      - stripe_uploads:/app/uploads
      # Application logs
      - stripe_logs:/app/logs
      # Backup directory
      - stripe_backups:/var/backups/stripe_dashboard
      # Configuration overrides
      - ./config:/app/config:ro
    
    # Network configuration
    networks:
      - stripe_network
    
    # Resource limits for Dell server optimization
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy for production
  nginx:
    image: nginx:1.25-alpine
    container_name: stripe-dashboard-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      stripe-dashboard:
        condition: service_healthy
    
    networks:
      - stripe_network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: stripe-dashboard-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    
    volumes:
      - redis_data:/data
    
    networks:
      - stripe_network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 32M
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Database backup service
  db-backup:
    image: alpine:3.18
    container_name: stripe-dashboard-backup
    restart: "no"
    
    volumes:
      - stripe_db_data:/data:ro
      - stripe_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    
    networks:
      - stripe_network
    
    # Run backup script
    command: /backup.sh
    
    # Security options
    security_opt:
      - no-new-privileges:true

  # Monitoring with Prometheus node exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: stripe-dashboard-monitoring
    restart: unless-stopped
    
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    
    volumes:
      - /:/host:ro,rslave
    
    networks:
      - stripe_network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 16M
    
    # Security options
    security_opt:
      - no-new-privileges:true

# Network configuration
networks:
  stripe_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: stripe_br0

# Volume definitions for data persistence
volumes:
  # Application data
  stripe_db_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/stripe_dashboard_db
  
  stripe_csv_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/stripe_dashboard_csv
  
  stripe_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/stripe_dashboard_uploads
  
  stripe_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log/stripe_dashboard
  
  stripe_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/backups/stripe_dashboard
  
  # Infrastructure data
  redis_data:
    driver: local
  
  nginx_logs:
    driver: local
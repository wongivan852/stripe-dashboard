# Multi-stage Dockerfile optimized for Dell Linux server deployment
# Supports both macOS development and Linux production environments

# Build stage - Development dependencies and build tools
FROM python:3.11-slim-bullseye as builder

# Set build arguments for cross-platform compatibility
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Build-time dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    curl \
    git \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt

# Production stage - Minimal runtime environment
FROM python:3.11-slim-bullseye as production

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    sqlite3 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r stripe && useradd -r -g stripe -m -d /app -s /bin/bash stripe

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p \
    /app/instance \
    /app/csv_data \
    /app/uploads \
    /app/logs \
    /var/lib/stripe_dashboard \
    /var/backups/stripe_dashboard \
    && chown -R stripe:stripe /app \
    && chown -R stripe:stripe /var/lib/stripe_dashboard \
    && chown -R stripe:stripe /var/backups/stripe_dashboard \
    && chmod 755 /app/instance \
    && chmod 755 /app/csv_data \
    && chmod 755 /app/uploads \
    && chmod 755 /app/logs

# Copy application code with proper ownership
COPY --chown=stripe:stripe . .

# Create symlinks for backward compatibility
RUN ln -sf csv_data july25 && \
    ln -sf july25 new_csv

# Set environment variables for production
ENV FLASK_ENV=production \
    FLASK_DEBUG=False \
    PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    DATABASE_URL=sqlite:///var/lib/stripe_dashboard/production.db \
    CSV_DATA_PATH=/app/csv_data \
    HOST=0.0.0.0 \
    PORT=5000

# Switch to non-root user
USER stripe

# Expose port
EXPOSE 5000

# Health check optimized for Linux environments
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Use exec form for better signal handling
CMD ["python", "wsgi.py"]